// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profiles      Profile[]
  records       Record[]
  mybooks       MyBook[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


// momo
model Profile {
  userId    String      @id
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName String

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("profile")
}

model Record {
  id        BigInt      @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  isbn      String?
  publishedBook PublishedBook? @relation(fields: [isbn], references: [isbn], onDelete: SetNull)
  
  originalBookId BigInt?
  originalBook OriginalBook?  @relation(fields: [originalBookId], references: [id], onDelete: SetNull)

  amount    Int
  dateUTC   DateTime
  dateLocal DateTime

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("record")
}

model PublishedBook {
  isbn      String      @id
  title     String
  imageUrl  String
  records   Record[]
  myBook    MyBook[]
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("publishedbook")
}

model OriginalBook {
  id        BigInt      @unique
  myBook    MyBook      @relation(fields: [id], references: [id], onDelete: Cascade)
  title     String
  color     String
  records   Record[]
  
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("originalbook")
}

enum BookStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model MyBook {
  id        BigInt      @id @default(autoincrement())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  order     Int
  isbn      String?
  status    BookStatus

  // published book or original book 

  // published book
  publishedBook PublishedBook? @relation(fields: [isbn], references: [isbn], onDelete: SetNull)
  originalBookId  BigInt?

  // original book
  originalBook OriginalBook?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("mybook")
}
